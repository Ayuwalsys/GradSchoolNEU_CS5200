dbfile <- 'MediaDB.db'
dbcon <- dbConnect(SQLite(), dbfile)
dbfile <- 'MediaDB.db'
dbcon <- dbConnect(SQLite(), dbfile)
library(RSQLite)
dbfile <- 'MediaDB.db'
dbcon <- dbConnect(SQLite(), dbfile)
dbListTables(dbcon)
dbListTables(dbcon)
#check and add if the column 'play_time exists
if(!("play_time" %in% colnames(dbReadTable(con, "albums")))){
dbExecute(con, "ALTER TABLE albums ADD COLUMN play_time NUMERIC CHECK (play_time >= 0 ) ")
}
#check and add if the column 'play_time exists
if(!("play_time" %in% colnames(dbReadTable(dbcon, "albums")))){
dbExecute(con, "ALTER TABLE albums ADD COLUMN play_time NUMERIC CHECK (play_time >= 0 ) ")
}
dbExecute(dbcon, "ALTER TABLE albums ADD COLUMN play_time NUMERIC CHECK (play_time >= 0 ) ")
dbListTables(dbcon)
dbListTables(dbcon, albums)
Select * from albums
"SELECT * FROM ALBUMS"
SELECT * FROM albums
"SELECT * FROM albums"
dbExecute(dbcon, "
UPDATE albums
SET play_time = (
SELECT SUM(Milliseconds) / 60000.0
FROM tracks
WHERE albums.AlbumsId = tracks.AlbumId
)")
dbExecute(dbcon, "
UPDATE albums
SET play_time = (
SELECT SUM(Milliseconds) / 60000.0
FROM tracks
WHERE albums.AlbumId = tracks.AlbumId
)")
dbExecute(dbcon,"
CREATE TRIGGER IF NOT EXISTS after_track_insert
AFTER INSERT ON tracks
BEGIN
UPDATE albums
SET play_time = (
SELECT SUM(Milliseconds / 60000.0)
FROM tracks
WHERE tracks.AlbumId = NEW.AlbumId
)
WHERE AlbumId = NEW.AlbumId;
END;
")
dbExecute(dbcon, "
CREATE TRIGGER IF NOT EXISTS after_track_delete
AFTER DELETE ON tracks
BEGIN
UPDATE albums
SET play_time = (
SELECT SUM(Milliseconds / 60000.0)
FROM tracks
WHERE tracks.AlbumId = OLD.AlbumId
)
WHERE AlbumId = OLD.AlbumId;
END;
")
dbExecute(dbcon, "
CREATE TRIGGER IF NOT EXISTS after_track_update
AFTER UPDATE ON tracks
BEGIN
UPDATE albums
SET play_time = (
SELECT SUM(Milliseconds / 60000.0)
FROM tracks
WHERE tracks.AlbumId = NEW.AlbumId
)
WHERE AlbumId = NEW.AlbumId
END;
")
dbExecute(dbcon, "
CREATE TRIGGER IF NOT EXISTS after_track_update
AFTER UPDATE ON tracks
BEGIN
UPDATE albums
SET play_time = (
SELECT SUM(Milliseconds / 60000.0)
FROM tracks
WHERE tracks.AlbumId = NEW.AlbumId
)
WHERE AlbumId = NEW.AlbumId
END;
")
dbExecute(dbcon, "
CREATE TRIGGER IF NOT EXISTS after_track_update
AFTER UPDATE ON tracks
BEGIN
UPDATE albums
SET play_time = (
SELECT SUM(Milliseconds / 60000.0)
FROM tracks
WHERE tracks.AlbumId = NEW.AlbumId
)
WHERE AlbumId = NEW.AlbumId
END;
")
dbExecute(dbcon, "
CREATE TRIGGER IF NOT EXISTS after_track_update
AFTER UPDATE ON tracks
BEGIN
UPDATE albums
SET play_time = (
SELECT SUM(Milliseconds / 60000.0)
FROM tracks
WHERE tracks.AlbumId = NEW.AlbumId
)
WHERE AlbumId = NEW.AlbumId;
END;
")
dbExecute(dbcon, "
CREATE TRIGGER IF NOT EXISTS after_track_delete
AFTER DELETE ON tracks
BEGIN
UPDATE albums
SET play_time = (
SELECT SUM(Milliseconds / 60000.0)
FROM tracks
WHERE tracks.AlbumId = OLD.AlbumId
)
WHERE AlbumId = OLD.AlbumId;
END;
")
main():
#Insert a new track to test the 'after insert' trigger
dbExecute(dbcon, "INSERT INTO tracks (Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice) VALUES('New Track', 1,1,1, 'Test Composer', 300000, 1024, 0.99)")
#Insert a new track to test the 'after insert' trigger
dbExecute(dbcon, "INSERT INTO tracks (Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice) VALUES('New Track', 1,1,1, 'Test Composer', 300000, 1024, 0.99)")
#Update a tract to test the "after update" trigger
dbExecute(dbcon, "UPDATE tracks SET Milliseconds = 400000 WHERE TrackId = (SELECT MAX(TrackId) FROM tracks)")
#Check the "play_time" of an album to see if the triggers worked
dbGetQuery(dbcon, "SELECT AlbumId, play_time FROM albums WHERE AlbumId = 1")
#Insert a new track to test the 'after insert' trigger
dbExecute(dbcon, "INSERT INTO tracks (Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice) VALUES('New Track', 1,1,1, 'Test Composer', 300000, 1024, 0.99)")
#Update a tract to test the "after update" trigger
dbExecute(dbcon, "UPDATE tracks SET Milliseconds = 400000 WHERE TrackId = (SELECT MAX(TrackId) FROM tracks)")
#Delete a track to test the "after delete" trigger
dbExecution(dbcon, "DELETE FROM tracks WHERE TrackId = (SELECT MAX(TrackId) FROM tracks)")
#Delete a track to test the "after delete" trigger
dbExecute(dbcon, "DELETE FROM tracks WHERE TrackId = (SELECT MAX(TrackId) FROM tracks)")
#Check the "play_time" of an album to see if the triggers worked
dbGetQuery(dbcon, "SELECT AlbumId, play_time FROM albums WHERE AlbumId = 1")
# Add play_time column if it doesn't exist
add_column_play_time(conn)
# Main execution
main <- function() {
database_file <- 'MediaDB.db'
# Connect to the database
conn <- connect_to_db(database_file)
# Add play_time column if it doesn't exist
add_column_play_time(conn)
# Update play_time for each album
update_play_time(conn)
# Create triggers
create_triggers(conn)
# Test the triggers
test_triggers(conn)
# Close the connection
dbDisconnect(conn)
}
# Run the main function
main()
library(RSQLite)
# Function to connect to the SQLite database
connect_to_db <- function(db_file) {
conn <- dbConnect(SQLite(), dbname = db_file)
return(conn)
}
# Function to add a new column to the 'albums' table
add_column_play_time <- function(conn) {
rs <- dbSendQuery(conn, "PRAGMA table_info(albums)")
info <- dbFetch(rs)
dbClearResult(rs)
if (!'play_time' %in% info$name) {
dbExecute(conn, "ALTER TABLE albums ADD COLUMN play_time NUMERIC CHECK (play_time > 0)")
}
}
# Function to calculate the total play time for each album
update_play_time <- function(conn) {
dbExecute(conn, "UPDATE albums SET play_time = (SELECT SUM(milliseconds / 60000.0) FROM tracks WHERE tracks.AlbumId = albums.AlbumId)")
}
# Function to create a trigger to update 'play_time' after insert, update, or delete on 'tracks'
create_triggers <- function(conn) {
triggers <- list(
c('after_insert_trigger', 'AFTER INSERT'),
c('after_update_trigger', 'AFTER UPDATE'),
c('after_delete_trigger', 'AFTER DELETE')
)
for (trigger in triggers) {
dbExecute(conn, paste0("DROP TRIGGER IF EXISTS ", trigger[1]))
dbExecute(conn, sprintf("
CREATE TRIGGER %s
%s ON tracks
FOR EACH ROW
BEGIN
UPDATE albums
SET play_time = (
SELECT SUM(milliseconds / 60000.0)
FROM tracks
WHERE tracks.AlbumId = NEW.AlbumId
)
WHERE AlbumId = NEW.AlbumId;
END;", trigger[1], trigger[2]))
}
}
# Test cases to demonstrate that the trigger works
test_triggers <- function(conn) {
dbExecute(conn, "INSERT INTO tracks (Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice) VALUES ('Test Track', 1, 1, 1, 'Test Composer', 240000, 0, 0.99)")
result <- dbGetQuery(conn, "SELECT play_time FROM albums WHERE AlbumId = 1")
print(paste0("Updated play_time for AlbumId 1: ", result$play_time, " minutes"))
}
# Main execution
main <- function() {
database_file <- 'MediaDB.db'
# Connect to the database
conn <- connect_to_db(database_file)
# Add play_time column if it doesn't exist
add_column_play_time(conn)
# Update play_time for each album
update_play_time(conn)
# Create triggers
create_triggers(conn)
# Test the triggers
test_triggers(conn)
# Close the connection
dbDisconnect(conn)
}
# Run the main function
main()
library(RSQLite)
# The function connect to the SQLite database
connect_db <- function(db_file) {
dbcon <- dbConnect(SQLite(), dbname = db_file)
return(dbcon)
}
# The function add a new column to the 'albums' table
add_column_play_time <- function(dbcon) {
res <- dbSendQuery(dbcon, "PRAGMA table_info(albums)")
info <- dbFetch(res)
dbClearResult(res)
if (!'play_time' %in% info$name) {
dbExecute(conn, "ALTER TABLE albums ADD COLUMN play_time NUMERIC CHECK (play_time > 0)")
}
}
# The Function calculate the total play_time for each album
update_play_time <- function(dbcon) {
dbExecute(dbcon, "UPDATE albums SET play_time = (SELECT SUM(milliseconds / 60000.0) FROM tracks WHERE tracks.AlbumId = albums.AlbumId)")
}
# Function to create a trigger to update 'play_time' after insert, update, or delete on 'tracks'
create_triggers <- function(dbcon) {
triggers <- list(
c('after_insert_trigger', 'AFTER INSERT'),
c('after_update_trigger', 'AFTER UPDATE'),
c('after_delete_trigger', 'AFTER DELETE')
)
for (trigger in triggers) {
dbExecute(dbcon, paste0("DROP TRIGGER IF EXISTS ", trigger[1]))
dbExecute(dbcon, sprintf("
CREATE TRIGGER %s
%s ON tracks
FOR EACH ROW
BEGIN
UPDATE albums
SET play_time = (
SELECT SUM(milliseconds / 60000.0)
FROM tracks
WHERE tracks.AlbumId = NEW.AlbumId
)
WHERE AlbumId = NEW.AlbumId;
END;", trigger[1], trigger[2]))
}
}
# Test used cases that demonstrate how the trigger works
test_triggers <- function(dbcon) {
dbExecute(dbcon, "INSERT INTO tracks (Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice) VALUES ('Test Track', 1, 1, 1, 'Test Composer', 240000, 0, 0.99)")
result <- dbGetQuery(dbcon, "SELECT play_time FROM albums WHERE AlbumId = 1")
print(paste0("Updated play_time for AlbumId 1: ", result$play_time, " minutes"))
}
# Main execution
main <- function() {
database_file <- 'MediaDB.db'
# Connection to database
dbcon <- connect_db(database_file)
#play_time column added if it doesn't exist
add_column_play_time(dbcon)
# Update play_time for each album
update_play_time(dbcon)
# Create triggers
create_triggers(dbcon)
# Test the triggers
test_triggers(dbcon)
# Close the connection
dbDisconnect(dbcon)
}
# Run the main function
main()
library(RSQLite)
# The function connect to the SQLite database
connect_db <- function(db_file) {
dbcon <- dbConnect(SQLite(), dbname = db_file)
return(dbcon)
}
# The function add a new column to the 'albums' table
add_column_play_time <- function(dbcon) {
res <- dbSendQuery(dbcon, "PRAGMA table_info(albums)")
info <- dbFetch(res)
dbClearResult(res)
if (!'play_time' %in% info$name) {
dbExecute(conn, "ALTER TABLE albums ADD COLUMN play_time NUMERIC CHECK (play_time > 0)")
}
}
# This Function calculate the total play_time for each album
update_play_time <- function(dbcon) {
dbExecute(dbcon, "UPDATE albums SET play_time = (SELECT SUM(milliseconds / 60000.0) FROM tracks WHERE tracks.AlbumId = albums.AlbumId)")
}
# This Function create a trigger to update 'play_time' after insert, update, or delete on 'tracks'
create_triggers <- function(dbcon) {
triggers <- list(
c('after_insert_trigger', 'AFTER INSERT'),
c('after_update_trigger', 'AFTER UPDATE'),
c('after_delete_trigger', 'AFTER DELETE')
)
for (trigger in triggers) {
dbExecute(dbcon, paste0("DROP TRIGGER IF EXISTS ", trigger[1]))
dbExecute(dbcon, sprintf("
CREATE TRIGGER %s
%s ON tracks
FOR EACH ROW
BEGIN
UPDATE albums
SET play_time = (
SELECT SUM(milliseconds / 60000.0)
FROM tracks
WHERE tracks.AlbumId = NEW.AlbumId
)
WHERE AlbumId = NEW.AlbumId;
END;", trigger[1], trigger[2]))
}
}
# Test used cases that demonstrate how the trigger works
test_triggers <- function(dbcon) {
dbExecute(dbcon, "INSERT INTO tracks (Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice) VALUES ('Test Track', 1, 1, 1, 'Test Composer', 240000, 0, 0.99)")
result <- dbGetQuery(dbcon, "SELECT play_time FROM albums WHERE AlbumId = 1")
print(paste0("Updated play_time for AlbumId 1: ", result$play_time, " minutes"))
}
# Main execution
main <- function() {
database_file <- 'MediaDB.db'
# Connection to database
dbcon <- connect_db(database_file)
#play_time column added if it doesn't exist
add_column_play_time(dbcon)
# Update play_time for each album
update_play_time(dbcon)
# Create triggers
create_triggers(dbcon)
# Test the triggers
test_triggers(dbcon)
# Close the connection
dbDisconnect(dbcon)
}
# Run the main function
main()
