}
# Parse command line argument for the CSV file path
args <- commandArgs(trailingOnly = TRUE)
csvFilePath <- args[1]
# Check if the file path is provided
if (is.null(csvFilePath)) {
stop("No CSV file path provided as argument.")
}
csvFilePath <- "BirdStrikesData-New1.csv"  # Replace with your CSV file path
loadDataAndInsert(csvFilePath)
removeCSVData(csvFilePath, connection)
# ... similar deletions for other tables like airports, conditions
airport_ids <- unique(new_data$origin)
condition_ids <- unique(new_data$sky_conditions)
# Delete data from airports table
if (length(airport_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM airports WHERE aid IN (%s)", paste(airport_ids, collapse = ",")))
}
# Delete data from conditions table
if (length(condition_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM conditions WHERE cid IN (%s)", paste(condition_ids, collapse = ",")))
}
if ("originAirport" %in% names(new_data)) {
airport_ids <- unique(new_data$originAirport)
# Ensure airport_ids are integers
if (all(sapply(airport_ids, is.numeric)) && length(airport_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM airports WHERE aid IN (%s)", paste(airport_ids, collapse = ",")))
}
}
if ("conditions" %in% names(new_data)) {
condition_ids <- unique(new_data$conditions)
# Ensure condition_ids are integers
if (all(sapply(condition_ids, is.numeric)) && length(condition_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM conditions WHERE cid IN (%s)", paste(condition_ids, collapse = ",")))
}
}
# Commit transaction
dbCommit(connection)
tryCatch({
# Delete data from each table using the unique identifiers
# You need to ensure the deletions happen in the correct order to respect foreign key constraints
dbExecute(connection, sprintf("DELETE FROM strikes WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
dbExecute(connection, sprintf("DELETE FROM flights WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
# ... similar deletions for other tables like airports, conditions
airport_ids <- unique(new_data$origin)
condition_ids <- unique(new_data$sky_conditions)
if ("originAirport" %in% names(new_data)) {
airport_ids <- unique(new_data$originAirport)
# Ensure airport_ids are integers
if (all(sapply(airport_ids, is.numeric)) && length(airport_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM airports WHERE aid IN (%s)", paste(airport_ids, collapse = ",")))
}
}
if ("conditions" %in% names(new_data)) {
condition_ids <- unique(new_data$conditions)
# Ensure condition_ids are integers
if (all(sapply(condition_ids, is.numeric)) && length(condition_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM conditions WHERE cid IN (%s)", paste(condition_ids, collapse = ",")))
}
}
# Commit transaction
dbCommit(connection)
}, error = function(e) {
# Rollback in case of an error
dbRollback(connection)
stop(e)
})
removeCSVData <- function(csvFilePath, connection) {
# Assuming the CSV contains unique identifiers like 'rid' that can be used to delete data
new_data <- read_csv(csvFilePath)
rid_values <- new_data$rid
# Start transaction
dbBegin(connection)
tryCatch({
# Delete data from each table using the unique identifiers
# You need to ensure the deletions happen in the correct order to respect foreign key constraints
dbExecute(connection, sprintf("DELETE FROM strikes WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
dbExecute(connection, sprintf("DELETE FROM flights WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
# ... similar deletions for other tables like airports, conditions
airport_ids <- unique(new_data$origin)
condition_ids <- unique(new_data$sky_conditions)
if ("originAirport" %in% names(new_data)) {
airport_ids <- unique(new_data$originAirport)
# Ensure airport_ids are integers
if (all(sapply(airport_ids, is.numeric)) && length(airport_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM airports WHERE aid IN (%s)", paste(airport_ids, collapse = ",")))
}
}
if ("conditions" %in% names(new_data)) {
condition_ids <- unique(new_data$conditions)
# Ensure condition_ids are integers
if (all(sapply(condition_ids, is.numeric)) && length(condition_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM conditions WHERE cid IN (%s)", paste(condition_ids, collapse = ",")))
}
}
# Commit transaction
dbCommit(connection)
}, error = function(e) {
# Rollback in case of an error
dbRollback(connection)
stop(e)
})
}
# Parse command line argument for the CSV file path
args <- commandArgs(trailingOnly = TRUE)
csvFilePath <- args[1]
# Check if the file path is provided
if (is.null(csvFilePath)) {
stop("No CSV file path provided as argument.")
}
csvFilePath <- "BirdStrikesData-New1.csv"  # Replace with your CSV file path
loadDataAndInsert(csvFilePath)
removeCSVData(csvFilePath, connection)
if ("originAirport" %in% names(new_data)) {
airport_ids <- unique(new_data$originAirport)
# make sure airport_ids are integers
if (all(sapply(airport_ids, is.numeric)) && length(airport_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM airports WHERE aid IN (%s)", paste(airport_ids, collapse = ",")))
}
}
if ("conditions" %in% names(new_data)) {
condition_ids <- unique(new_data$conditions)
# Ensure condition_ids are integers
if (all(sapply(condition_ids, is.numeric)) && length(condition_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM conditions WHERE cid IN (%s)", paste(condition_ids, collapse = ",")))
}
}
# Commit transaction
dbCommit(connection)
tryCatch({
# Delete data from each table using the unique identifiers
# You need to ensure the deletions happen in the correct order to respect foreign key constraints
dbExecute(connection, sprintf("DELETE FROM strikes WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
dbExecute(connection, sprintf("DELETE FROM flights WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
# ... similar deletions for other tables like airports, conditions
airport_ids <- unique(new_data$origin)
condition_ids <- unique(new_data$sky_conditions)
if ("originAirport" %in% names(new_data)) {
airport_ids <- unique(new_data$originAirport)
# make sure airport_ids are integers
if (all(sapply(airport_ids, is.numeric)) && length(airport_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM airports WHERE aid IN (%s)", paste(airport_ids, collapse = ",")))
}
}
if ("conditions" %in% names(new_data)) {
condition_ids <- unique(new_data$conditions)
# Ensure condition_ids are integers
if (all(sapply(condition_ids, is.numeric)) && length(condition_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM conditions WHERE cid IN (%s)", paste(condition_ids, collapse = ",")))
}
}
# Commit transaction
dbCommit(connection)
}, error = function(e) {
# Rollback in case of an error
dbRollback(connection)
stop(e)
})
removeCSVData <- function(csvFilePath, connection) {
# Assuming the CSV contains unique identifiers like 'rid' that can be used to delete data
new_data <- read_csv(csvFilePath)
rid_values <- new_data$rid
# Start transaction
dbBegin(connection)
tryCatch({
# Delete data from each table using the unique identifiers
# You need to ensure the deletions happen in the correct order to respect foreign key constraints
dbExecute(connection, sprintf("DELETE FROM strikes WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
dbExecute(connection, sprintf("DELETE FROM flights WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
# ... similar deletions for other tables like airports, conditions
airport_ids <- unique(new_data$origin)
condition_ids <- unique(new_data$sky_conditions)
if ("originAirport" %in% names(new_data)) {
airport_ids <- unique(new_data$originAirport)
# make sure airport_ids are integers
if (all(sapply(airport_ids, is.numeric)) && length(airport_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM airports WHERE aid IN (%s)", paste(airport_ids, collapse = ",")))
}
}
if ("conditions" %in% names(new_data)) {
condition_ids <- unique(new_data$conditions)
# Ensure condition_ids are integers
if (all(sapply(condition_ids, is.numeric)) && length(condition_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM conditions WHERE cid IN (%s)", paste(condition_ids, collapse = ",")))
}
}
# Commit transaction
dbCommit(connection)
}, error = function(e) {
# Rollback in case of an error
dbRollback(connection)
stop(e)
})
}
# Parse command line argument for the CSV file path
args <- commandArgs(trailingOnly = TRUE)
csvFilePath <- args[1]
# Check if the file path is provided
if (is.null(csvFilePath)) {
stop("No CSV file path provided as argument.")
}
csvFilePath <- "BirdStrikesData-New1.csv"  # Replace with your CSV file path
loadDataAndInsert(csvFilePath)
removeCSVData(csvFilePath, connection)
if (useTransactions) {
dbCommit(connection)
}
removeCSVData <- function(csvFilePath, useTransactions) {
dbBegin(connection)
if (useTransactions) {
dbBegin(connection)
}
# Assuming the CSV contains unique identifiers like 'rid' that can be used to delete data
new_data <- read_csv(csvFilePath)
rid_values <- new_data$rid
# Start transaction
dbBegin(connection)
tryCatch({
# Delete data from each table using the unique identifiers
# You need to ensure the deletions happen in the correct order to respect foreign key constraints
dbExecute(connection, sprintf("DELETE FROM strikes WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
dbExecute(connection, sprintf("DELETE FROM flights WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
# ... similar deletions for other tables like airports, conditions
airport_ids <- unique(new_data$origin)
condition_ids <- unique(new_data$sky_conditions)
if ("originAirport" %in% names(new_data)) {
airport_ids <- unique(new_data$originAirport)
# make sure airport_ids are integers
if (all(sapply(airport_ids, is.numeric)) && length(airport_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM airports WHERE aid IN (%s)", paste(airport_ids, collapse = ",")))
}
}
if ("conditions" %in% names(new_data)) {
condition_ids <- unique(new_data$conditions)
# Ensure condition_ids are integers
if (all(sapply(condition_ids, is.numeric)) && length(condition_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM conditions WHERE cid IN (%s)", paste(condition_ids, collapse = ",")))
}
}
# Commit transaction
dbCommit(connection)
}, error = function(e) {
# Rollback in case of an error
dbRollback(connection)
stop(e)
})
if (useTransactions) {
dbCommit(connection)
}
error = function(e) {
if (useTransactions) {
dbRollback(connection)
}
message("Error: ", e$message)
}
# Parse command line argument for the CSV file path
args <- commandArgs(trailingOnly = TRUE)
csvFilePath <- args[1]
useTransactions <- tolower(args[2]) == "true"
# Check if the file path is provided
if (is.null(csvFilePath)) {
stop("No CSV file path provided as argument.")
}
csvFilePath <- "BirdStrikesData-New1.csv"  # Replace with your CSV file path
loadDataAndInsert(csvFilePathuseTransactions)
removeCSVData(csvFilePath, connection)
loadDataAndInsert(csvFilePath, useTransactions)
removeCSVData(csvFilePath, connection)
loadDataAndInsert(csvFilePath, useTransactions)
loadDataAndInsert <- function(csvFilePath, useTransactions) {
if (tolower(useTransactions) == "true") {
dbBegin(connection)
}
tryCatch({
# Load CSV data
bird_strikes_data <- read_csv(csvFilePath)
# Preprocess data using helper functions
airports_data <- prepareAirportsData(bird_strikes_data)
flights_data <- prepareFlightsData(bird_strikes_data, airports_data)
conditions_data <- prepareConditionsData(bird_strikes_data)
strikes_data <- prepareStrikesData(bird_strikes_data, flights_data, conditions_data)
# Insert data with delay
dbWriteTable(connection, 'airports', airports_data, append = TRUE, row.names = FALSE)
Sys.sleep(1)  # Delay for 1 second
dbWriteTable(connection, 'flights', flights_data, append = TRUE, row.names = FALSE)
Sys.sleep(1)  # Delay for 1 second
dbWriteTable(connection, 'conditions', conditions_data, append = TRUE, row.names = FALSE)
Sys.sleep(1)  # Delay for 1 second
dbWriteTable(connection, 'strikes', strikes_data, append = TRUE, row.names = FALSE)
Sys.sleep(1)  # Delay for 1 second
if (tolower(useTransactions) == "true") {
dbCommit(connection)
}
}, error = function(e) {
if (tolower(useTransactions) == "true") {
dbRollback(connection)
}
message("Error in transaction: ", e$message)
})
}
removeCSVData <- function(csvFilePath, connection) {
# Assuming the CSV contains unique identifiers like 'rid' that can be used to delete data
new_data <- read_csv(csvFilePath)
rid_values <- new_data$rid
# Start transaction
dbBegin(connection)
tryCatch({
# Delete data from each table using the unique identifiers
# You need to ensure the deletions happen in the correct order to respect foreign key constraints
dbExecute(connection, sprintf("DELETE FROM strikes WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
dbExecute(connection, sprintf("DELETE FROM flights WHERE fid IN (%s)", paste(rid_values, collapse = ",")))
# ... similar deletions for other tables like airports, conditions
airport_ids <- unique(new_data$origin)
condition_ids <- unique(new_data$sky_conditions)
if ("originAirport" %in% names(new_data)) {
airport_ids <- unique(new_data$originAirport)
# make airport_ids are integers
if (all(sapply(airport_ids, is.numeric)) && length(airport_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM airports WHERE aid IN (%s)", paste(airport_ids, collapse = ",")))
}
}
if ("conditions" %in% names(new_data)) {
condition_ids <- unique(new_data$conditions)
# Ensure condition_ids are integers
if (all(sapply(condition_ids, is.numeric)) && length(condition_ids) > 0) {
dbExecute(connection, sprintf("DELETE FROM conditions WHERE cid IN (%s)", paste(condition_ids, collapse = ",")))
}
}
# Commit transaction
dbCommit(connection)
}, error = function(e) {
# Rollback in case of an error
dbRollback(connection)
stop(e)
})
}
# Parse command line arguments
args <- commandArgs(trailingOnly = TRUE)
csvFilePath <- args[1]
useTransactions <- args[2]  # "true" or "false"
# Check if the file path is provided
if (is.null(csvFilePath)) {
stop("No CSV file path provided as argument.")
}
csvFilePath <- "BirdStrikesData-New1.csv"  # Replace with your CSV file path
# Run the function with the specified CSV file and transaction setting
loadDataAndInsert(csvFilePath, useTransactions)
## Prepare Airports Data
prepareAirportsData <- function(df) {
# Extract unique airports along with their states
unique_airports <- unique(df[, c("airport", "origin")])
# Remove missing values or replace with a placeholder
unique_airports <- na.omit(unique_airports)
# Create a dataFrame modified according to schema
df_airports <- data.frame(
airportName = unique_airports$airport,
airportState = unique_airports$origin,
airportCode = rep('ZZZ', nrow(unique_airports))
)
return(df_airports)
}
prepareFlightsData <- function(df, airports_df) {
# Convert flightDate to Date format
df$flight_date <- as.Date(df$flight_date, format = "%m/%d/%Y")
# Map originAirport to airport IDs
df$originAirport <- match(df$airport, airports_df$airportName)
# Handle missing airline values
df$airline[is.na(df$airline)] <- "Unknown"
# Convert heavy_flag to boolean
df$isHeavy <- df$heavy_flag == "Yes"
# Subset and rename columns as per table structure
flights_df <- data.frame(
fid = df$rid,
date = df$flight_date,
originAirport = df$originAirport,
airlineName = df$airline,
aircraftType = df$aircraft,
isHeavy = df$isHeavy
)
return(flights_df)
}
prepareConditionsData <- function(df) {
# Extract unique sky conditions and remove missing values
unique_conditions <- unique(df$sky_conditions)
# Create a dataFrame with sky_condition and empty explanation
conditions_df <- data.frame(
sky_condition = unique_conditions,
explanation = rep("", length(unique_conditions)) # Setting explanation to empty string
)
return(conditions_df)
}
## Prepare Strike Data
prepareStrikesData <- function(df, flights_df, conditions_df) {
# Convert altitude_ft to numeric and ensure it's non-negative
df$altitude_ft <- as.numeric(gsub(",", "", df$altitude_ft))
df$altitude_ft[df$altitude_ft < 0] <- 0
# Map fid to flight IDs based on the record ID
df$fid <- match(df$rid, flights_df$fid)
df$fid[is.na(df$fid)] <- -1  # Handles unmatched fids with a default value
# Map conditions to condition IDs based on sky conditions
df$conditions <- match(df$sky_conditions, conditions_df$sky_condition)
df$conditions[is.na(df$conditions)] <- -1  # Handle unmatched conditions with a default value
# Convert damage description to boolean (TRUE for 'Damage', FALSE otherwise)
df$damage <- df$damage == "Damage"
# Handle numbirds
if (!"numbirds" %in% names(df) || all(is.na(df$numbirds))) {
df$numbirds <- rep(0, nrow(df))  # Assign 0 to all rows if the column doesn't exist or is entirely NA
} else {
df$numbirds <- as.integer(df$numbirds)
df$numbirds[is.na(df$numbirds)] <- 0  # Replace NA with 0
}
# Subset and rename columns as per table structure
strikes_df <- data.frame(
fid = df$fid,
numbirds = df$numbirds,
impact = df$impact,
damage = df$damage,
altitude = df$altitude_ft,
conditions = df$conditions
)
return(strikes_df)
}
## Populate the airport table
insertAirportsData <- function(connection, df_airports) {
# Check for duplicate entries in airports data
if(nrow(airports_data) != nrow(unique(airports_data))) {
stop("Duplicate entries found in airports data")
}
# resolve single quotes by replacing with two single quotes
df_airports$airportName <- gsub("'", "''", df_airports$airportName)
df_airports$airportState <- gsub("'", "''", df_airports$airportState)
df_airports$airportCode <- gsub("'", "''", df_airports$airportCode)
dbBegin(connection)
tryCatch({
dbExecute(connection, sprintf("INSERT INTO airports (airportName, airportState, airportCode) VALUES %s",
paste(sprintf("('%s', '%s', '%s')", df_airports$airportName, df_airports$airportState, df_airports$airportCode), collapse = ",")))
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
insertFlightsData <- function(connection, df_flights) {
# Convert isHeavy logical values to 1 (TRUE) or 0 (FALSE)
df_flights$isHeavy <- ifelse(is.na(df_flights$isHeavy), 'NULL', as.integer(df_flights$isHeavy))
dbBegin(connection)
tryCatch({
formatted_values <- apply(df_flights, 1, function(row) {
row <- ifelse(is.na(row), 'NULL', row)
sprintf("('%s', %s, '%s', '%s', %s)", row["date"], row["originAirport"], row["airlineName"], row["aircraftType"], row["isHeavy"])
})
sql_query <- sprintf("INSERT INTO flights (date, originAirport, airlineName, aircraftType, isHeavy) VALUES %s",
paste(formatted_values, collapse = ","))
dbExecute(connection, sql_query)
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
## Populate 'conditions' table
insertConditionsData <- function(connection, df_conditions) {
dbBegin(connection)
tryCatch({
dbExecute(connection, sprintf("INSERT INTO conditions (sky_condition, explanation) VALUES %s",
paste(sprintf("('%s', '%s')", df_conditions$sky_condition, df_conditions$explanation), collapse = ",")))
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
## Populate 'strikes'
insertStrikesData <- function(connection, df_strikes) {
# Replace NA values with 'NULL' in columns that can have NA
df_strikes$fid <- ifelse(is.na(df_strikes$fid), 'NULL', df_strikes$fid)
df_strikes$numbirds <- ifelse(is.na(df_strikes$numbirds), 'NULL', df_strikes$numbirds)
df_strikes$impact <- ifelse(is.na(df_strikes$impact), 'NULL', df_strikes$impact)
df_strikes$damage <- ifelse(is.na(df_strikes$damage), 'NULL', as.integer(df_strikes$damage))
df_strikes$altitude <- ifelse(is.na(df_strikes$altitude), 'NULL', df_strikes$altitude)
df_strikes$conditions <- ifelse(is.na(df_strikes$conditions), 'NULL', df_strikes$conditions)
dbBegin(connection)
tryCatch({
formatted_values <- apply(df_strikes, 1, function(row) {
sprintf("(%s, %s, '%s', %s, %s, %s)", row["fid"], row["numbirds"], row["impact"], row["damage"], row["altitude"], row["conditions"])
})
sql_query <- sprintf("INSERT INTO strikes (fid, numbirds, impact, damage, altitude, conditions) VALUES %s",
paste(formatted_values, collapse = ","))
dbExecute(connection, sql_query)
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
dbDisconnect(connection)
c
library(DBI)
library(RMySQL)
library(readr)
library(dplyr)
library(lubridate)
# Assuming the script with the function is named 'my_functions.R'
source("helper_functions.R")
#data base credential
connection <- dbConnect(RMySQL::MySQL(),
dbname = "sql5694554",
host = "sql5.freemysqlhosting.net",
port = 3306,
user = "sql5694554",
password = "uldtUsSbKn")
dbDisconnect(connection)
