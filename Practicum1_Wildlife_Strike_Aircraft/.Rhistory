sky_condition TEXT,
explanation TEXT
)"
)
dbExecute(connection, "
CREATE TABLE IF NOT EXISTS strikes(
sid INT AUTO_INCREMENT PRIMARY KEY ,
fid INT,
numbirds INT,
impact TEXT,
damage BOOLEAN,
altitude INT CHECK (altitude >= 0),
conditions INT,
FOREIGN KEY (fid) REFERENCES flights(fid),
FOREIGN KEY (conditions) REFERENCES conditions(cid)
)"
)
library(readr)
#Load the bird strikes data
bds.raw <- read_csv("BirdStrikesData-V3.csv")
prepare_airports_data <- function(df) {
# Extract unique airports along with their states
unique_airports <- unique(df[, c("airport", "origin")])
# Remove missing values or replace with a placeholder
unique_airports <- na.omit(unique_airports)
# Create a dataframe (Modified according to your schema)
df_airports <- data.frame(
airportName = unique_airports$airport,
airportState = unique_airports$origin,
airportCode = rep('ZZZ', nrow(unique_airports))
)
return(df_airports)
}
# Usage
airports_data <- prepare_airports_data(bds.raw)
prepare_flights_data <- function(df, airports_df) {
# Convert flight_date to Date format
df$flight_date <- as.Date(df$flight_date, format = "%m/%d/%Y")
# Map originAirport to airport IDs
df$originAirport <- match(df$airport, airports_df$airportName)
# Handle missing airline values
df$airline[is.na(df$airline)] <- "Unknown"
# Convert heavy_flag to boolean
df$isHeavy <- df$heavy_flag == "Yes"
# Subset and rename columns as per your table structure
flights_df <- data.frame(
fid = df$rid,
date = df$flight_date,
originAirport = df$originAirport,
airlineName = df$airline,
aircraftType = df$aircraft,
isHeavy = df$isHeavy
)
return(flights_df)
}
# Usage
flights_data <- prepare_flights_data(bds.raw, airports_data)
prepare_conditions_data <- function(df) {
# Extract unique sky conditions and remove missing values
unique_conditions <- unique(df$sky_conditions)
# Create a dataframe with sky_condition and empty explanation
conditions_df <- data.frame(
sky_condition = unique_conditions,
explanation = rep("", length(unique_conditions)) # Set explanation to empty string
)
return(conditions_df)
}
# Usage
conditions_data <- prepare_conditions_data(bds.raw)
prepare_strikes_data <- function(df, flights_df, conditions_df) {
# Convert altitude_ft to numeric and ensure it's non-negative
df$altitude_ft <- as.numeric(gsub(",", "", df$altitude_ft))
df$altitude_ft[df$altitude_ft < 0] <- 0
# Map fid to flight IDs based on the record ID
df$fid <- match(df$rid, flights_df$fid)
df$fid[is.na(df$fid)] <- -1  # Handle unmatched fids with a default value
# Map conditions to condition IDs based on sky conditions
df$conditions <- match(df$sky_conditions, conditions_df$sky_condition)
df$conditions[is.na(df$conditions)] <- -1  # Handle unmatched conditions with a default value
# Convert damage description to boolean (TRUE for 'Damage', FALSE otherwise)
df$damage <- df$damage == "Damage"
# Handle numbirds
if (!"numbirds" %in% names(df) || all(is.na(df$numbirds))) {
df$numbirds <- rep(0, nrow(df))  # Assign 0 to all rows if the column doesn't exist or is entirely NA
} else {
df$numbirds <- as.integer(df$numbirds)
df$numbirds[is.na(df$numbirds)] <- 0  # Replace NA with 0
}
# Subset and rename columns as per your table structure
strikes_df <- data.frame(
fid = df$fid,
numbirds = df$numbirds,
impact = df$impact,
damage = df$damage,
altitude = df$altitude_ft,
conditions = df$conditions
)
return(strikes_df)
}
# Usage
strikes_data <- prepare_strikes_data(bds.raw, flights_data, conditions_data)
insert_airports_data <- function(connection, df_airports) {
# resolve single quotes by replacing with two single quotes
df_airports$airportName <- gsub("'", "''", df_airports$airportName)
df_airports$airportState <- gsub("'", "''", df_airports$airportState)
df_airports$airportCode <- gsub("'", "''", df_airports$airportCode)
dbBegin(connection)
tryCatch({
#dbExecute(connection, "DELETE FROM airports")  # Optional: Clear the table before insert
dbExecute(connection, sprintf("INSERT INTO airports (airportName, airportState, airportCode) VALUES %s",
paste(sprintf("('%s', '%s', '%s')", df_airports$airportName, df_airports$airportState, df_airports$airportCode), collapse = ",")))
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
# Usage
insert_airports_data(connection, airports_data)
insert_flights_data <- function(connection, df_flights) {
# Convert isHeavy logical values to 1 (TRUE) or 0 (FALSE)
df_flights$isHeavy <- ifelse(is.na(df_flights$isHeavy), 'NULL', as.integer(df_flights$isHeavy))
dbBegin(connection)
tryCatch({
#dbExecute(connection, "DELETE FROM flights")  # Optional
formatted_values <- apply(df_flights, 1, function(row) {
row <- ifelse(is.na(row), 'NULL', row)
sprintf("('%s', %s, '%s', '%s', %s)", row["date"], row["originAirport"], row["airlineName"], row["aircraftType"], row["isHeavy"])
})
sql_query <- sprintf("INSERT INTO flights (date, originAirport, airlineName, aircraftType, isHeavy) VALUES %s",
paste(formatted_values, collapse = ","))
dbExecute(connection, sql_query)
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
# Usage
insert_flights_data(connection, flights_data)
insert_conditions_data <- function(connection, df_conditions) {
dbBegin(connection)
tryCatch({
#dbExecute(connection, "DELETE FROM conditions")  # Optional
dbExecute(connection, sprintf("INSERT INTO conditions (sky_condition, explanation) VALUES %s",
paste(sprintf("('%s', '%s')", df_conditions$sky_condition, df_conditions$explanation), collapse = ",")))
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
# Usage
insert_conditions_data(connection, conditions_data)
insert_strikes_data <- function(connection, df_strikes) {
# Replace NA values with 'NULL' in columns that can have NA
df_strikes$fid <- ifelse(is.na(df_strikes$fid), 'NULL', df_strikes$fid)
df_strikes$numbirds <- ifelse(is.na(df_strikes$numbirds), 'NULL', df_strikes$numbirds)
df_strikes$impact <- ifelse(is.na(df_strikes$impact), 'NULL', df_strikes$impact)
df_strikes$damage <- ifelse(is.na(df_strikes$damage), 'NULL', as.integer(df_strikes$damage))
df_strikes$altitude <- ifelse(is.na(df_strikes$altitude), 'NULL', df_strikes$altitude)
df_strikes$conditions <- ifelse(is.na(df_strikes$conditions), 'NULL', df_strikes$conditions)
dbBegin(connection)
tryCatch({
#dbExecute(connection, "DELETE FROM strikes")  # Optional
formatted_values <- apply(df_strikes, 1, function(row) {
sprintf("(%s, %s, '%s', %s, %s, %s)", row["fid"], row["numbirds"], row["impact"], row["damage"], row["altitude"], row["conditions"])
})
sql_query <- sprintf("INSERT INTO strikes (fid, numbirds, impact, damage, altitude, conditions) VALUES %s",
paste(formatted_values, collapse = ","))
dbExecute(connection, sql_query)
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
# Usage
insert_strikes_data(connection, strikes_data)
query_strikes_by_month <- function(connection) {
sql_query <- "
SELECT MONTHNAME(date) as Month, COUNT(*) as NumberOfStrikes
FROM flights f
JOIN strikes s ON f.fid = s.fid
GROUP BY MONTH(date)
ORDER BY MONTH(date)"
result <- dbGetQuery(connection, sql_query)
return(result)
}
# Usage
strikes_by_month_df <- query_strikes_by_month(connection)
print(head(strikes_by_month_df))
# Assuming strikes_by_month_df is the dataframe from the previous analysis
strikes_by_month_df$Month <- factor(strikes_by_month_df$Month, levels = month.name)
# Plot
barplot(strikes_by_month_df$NumberOfStrikes,
names.arg = strikes_by_month_df$Month,
las = 2, # Rotate axis labels
col = "blue",
main = "Wildlife Strikes by Month",
xlab = "Month",
ylab = "Number of Strikes",
cex.names = 0.7)
# Add data labels
text(x = barplot(strikes_by_month_df$NumberOfStrikes, plot = FALSE),
y = strikes_by_month_df$NumberOfStrikes + 5,
label = strikes_by_month_df$NumberOfStrikes,
pos = 3,
cex = 0.8,
col = "red")
# Create audit_log table
dbExecute(connection, "
CREATE TABLE IF NOT EXISTS audit_log (
log_id INT AUTO_INCREMENT PRIMARY KEY,
modification_type VARCHAR(255),
modified_table VARCHAR(255),
modification_timestamp DATETIME,
record_id INT
);
")
#drop the existing procedure
dropProcedureQuery <- "DROP PROCEDURE IF EXISTS remove_strike"
dbExecute(connection, dropProcedureQuery)
# Create the stored procedure
stored_procedure_query <- "
CREATE PROCEDURE remove_strike(IN strike_id INT)
BEGIN
DELETE FROM strikes WHERE sid = strike_id;
INSERT INTO audit_log (modification_type, modified_table, modification_timestamp, record_id)
VALUES ('Removal', 'strikes', NOW(), strike_id);
END
"
dbExecute(connection, stored_procedure_query)
# Call stored procedure
strike_to_remove <- 1  # Replace with the actual strike ID
dbExecute(connection, sprintf("CALL remove_strike(%d)", strike_to_remove))
# Query the audit log
audit_log_df <- dbGetQuery(connection, "SELECT * FROM audit_log")
print(audit_log_df)
library(DBI)
library(RMySQL)
#data base credential
connection <- dbConnect(RMySQL::MySQL(),
dbname = "sql5690228",
host = "sql5.freemysqlhosting.net",
port = 3306,
user = "sql5690228",
password = "aeAxe7ta5e")
library(DBI)
library(RMySQL)
#data base credential
connection <- dbConnect(RMySQL::MySQL(),
dbname = "sql5690228",
host = "sql5.freemysqlhosting.net",
port = 3306,
user = "sql5690228",
password = "aeAxe7ta5e")
dbExecute(connection, "
CREATE TABLE IF NOT EXISTS airports(
aid INT AUTO_INCREMENT PRIMARY KEY,
airportName TEXT,
airportState TEXT,
airportCode VARCHAR(255) DEFAULT 'ZZZ'
)")
dbExecute(connection, "
CREATE TABLE IF NOT EXISTS flights(
fid INT AUTO_INCREMENT PRIMARY KEY,
date DATE,
originAirport INT,
airlineName TEXT,
aircraftType TEXT,
isHeavy BOOLEAN,
FOREIGN KEY(originAirport) REFERENCES airports(aid))"
)
dbExecute(connection, "
CREATE TABLE IF NOT EXISTS conditions(
cid INT AUTO_INCREMENT PRIMARY KEY,
sky_condition TEXT,
explanation TEXT
)"
)
dbExecute(connection, "
CREATE TABLE IF NOT EXISTS strikes(
sid INT AUTO_INCREMENT PRIMARY KEY ,
fid INT,
numbirds INT,
impact TEXT,
damage BOOLEAN,
altitude INT CHECK (altitude >= 0),
conditions INT,
FOREIGN KEY (fid) REFERENCES flights(fid),
FOREIGN KEY (conditions) REFERENCES conditions(cid)
)"
)
library(readr)
#Load the bird strikes data
bds.raw <- read_csv("BirdStrikesData-V3.csv")
prepareAirportsData <- function(df) {
# Extract unique airports along with their states
unique_airports <- unique(df[, c("airport", "origin")])
# Remove missing values or replace with a placeholder
unique_airports <- na.omit(unique_airports)
# Create a dataFrame modified according to schema
df_airports <- data.frame(
airportName = unique_airports$airport,
airportState = unique_airports$origin,
airportCode = rep('ZZZ', nrow(unique_airports))
)
return(df_airports)
}
# Usage
airports_data <- prepareAirportsData(bds.raw)
prepareFlightsData <- function(df, airports_df) {
# Convert flightDate to Date format
df$flight_date <- as.Date(df$flight_date, format = "%m/%d/%Y")
# Map originAirport to airport IDs
df$originAirport <- match(df$airport, airports_df$airportName)
# Handle missing airline values
df$airline[is.na(df$airline)] <- "Unknown"
# Convert heavy_flag to boolean
df$isHeavy <- df$heavy_flag == "Yes"
# Subset and rename columns as per table structure
flights_df <- data.frame(
fid = df$rid,
date = df$flight_date,
originAirport = df$originAirport,
airlineName = df$airline,
aircraftType = df$aircraft,
isHeavy = df$isHeavy
)
return(flights_df)
}
# Usage
flights_data <- prepareFlightsData(bds.raw, airports_data)
prepareConditionsData <- function(df) {
# Extract unique sky conditions and remove missing values
unique_conditions <- unique(df$sky_conditions)
# Create a dataFrame with sky_condition and empty explanation
conditions_df <- data.frame(
sky_condition = unique_conditions,
explanation = rep("", length(unique_conditions)) # Setting explanation to empty string
)
return(conditions_df)
}
# Used case
conditions_data <- prepareConditionsData(bds.raw)
prepareStrikesData <- function(df, flights_df, conditions_df) {
# Convert altitude_ft to numeric and ensure it's non-negative
df$altitude_ft <- as.numeric(gsub(",", "", df$altitude_ft))
df$altitude_ft[df$altitude_ft < 0] <- 0
# Map fid to flight IDs based on the record ID
df$fid <- match(df$rid, flights_df$fid)
df$fid[is.na(df$fid)] <- -1  # Handles unmatched fids with a default value
# Map conditions to condition IDs based on sky conditions
df$conditions <- match(df$sky_conditions, conditions_df$sky_condition)
df$conditions[is.na(df$conditions)] <- -1  # Handle unmatched conditions with a default value
# Convert damage description to boolean (TRUE for 'Damage', FALSE otherwise)
df$damage <- df$damage == "Damage"
# Handle numbirds
if (!"numbirds" %in% names(df) || all(is.na(df$numbirds))) {
df$numbirds <- rep(0, nrow(df))  # Assign 0 to all rows if the column doesn't exist or is entirely NA
} else {
df$numbirds <- as.integer(df$numbirds)
df$numbirds[is.na(df$numbirds)] <- 0  # Replace NA with 0
}
# Subset and rename columns as per table structure
strikes_df <- data.frame(
fid = df$fid,
numbirds = df$numbirds,
impact = df$impact,
damage = df$damage,
altitude = df$altitude_ft,
conditions = df$conditions
)
return(strikes_df)
}
# Used case
strikes_data <- prepareStrikesData(bds.raw, flights_data, conditions_data)
insertAirportsData <- function(connection, df_airports) {
# resolve single quotes by replacing with two single quotes
df_airports$airportName <- gsub("'", "''", df_airports$airportName)
df_airports$airportState <- gsub("'", "''", df_airports$airportState)
df_airports$airportCode <- gsub("'", "''", df_airports$airportCode)
dbBegin(connection)
tryCatch({
dbExecute(connection, sprintf("INSERT INTO airports (airportName, airportState, airportCode) VALUES %s",
paste(sprintf("('%s', '%s', '%s')", df_airports$airportName, df_airports$airportState, df_airports$airportCode), collapse = ",")))
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
# Used case
insertAirportsData(connection, airports_data)
insertFlightsData <- function(connection, df_flights) {
# Convert isHeavy logical values to 1 (TRUE) or 0 (FALSE)
df_flights$isHeavy <- ifelse(is.na(df_flights$isHeavy), 'NULL', as.integer(df_flights$isHeavy))
dbBegin(connection)
tryCatch({
formatted_values <- apply(df_flights, 1, function(row) {
row <- ifelse(is.na(row), 'NULL', row)
sprintf("('%s', %s, '%s', '%s', %s)", row["date"], row["originAirport"], row["airlineName"], row["aircraftType"], row["isHeavy"])
})
sql_query <- sprintf("INSERT INTO flights (date, originAirport, airlineName, aircraftType, isHeavy) VALUES %s",
paste(formatted_values, collapse = ","))
dbExecute(connection, sql_query)
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
# Used case
insertFlightsData(connection, flights_data)
insertConditionsData <- function(connection, df_conditions) {
dbBegin(connection)
tryCatch({
dbExecute(connection, sprintf("INSERT INTO conditions (sky_condition, explanation) VALUES %s",
paste(sprintf("('%s', '%s')", df_conditions$sky_condition, df_conditions$explanation), collapse = ",")))
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
# Used case
insertConditionsData(connection, conditions_data)
insertStrikesData <- function(connection, df_strikes) {
# Replace NA values with 'NULL' in columns that can have NA
df_strikes$fid <- ifelse(is.na(df_strikes$fid), 'NULL', df_strikes$fid)
df_strikes$numbirds <- ifelse(is.na(df_strikes$numbirds), 'NULL', df_strikes$numbirds)
df_strikes$impact <- ifelse(is.na(df_strikes$impact), 'NULL', df_strikes$impact)
df_strikes$damage <- ifelse(is.na(df_strikes$damage), 'NULL', as.integer(df_strikes$damage))
df_strikes$altitude <- ifelse(is.na(df_strikes$altitude), 'NULL', df_strikes$altitude)
df_strikes$conditions <- ifelse(is.na(df_strikes$conditions), 'NULL', df_strikes$conditions)
dbBegin(connection)
tryCatch({
formatted_values <- apply(df_strikes, 1, function(row) {
sprintf("(%s, %s, '%s', %s, %s, %s)", row["fid"], row["numbirds"], row["impact"], row["damage"], row["altitude"], row["conditions"])
})
sql_query <- sprintf("INSERT INTO strikes (fid, numbirds, impact, damage, altitude, conditions) VALUES %s",
paste(formatted_values, collapse = ","))
dbExecute(connection, sql_query)
dbCommit(connection)
}, error = function(e) {
dbRollback(connection)
stop(e)
})
}
# Used case
insertStrikesData(connection, strikes_data)
queryStrikesByMonth <- function(connection) {
sqlQuery <- "
SELECT MONTHNAME(date) as Month, COUNT(*) as NumberOfStrikes
FROM flights f
JOIN strikes s ON f.fid = s.fid
GROUP BY MONTH(date)
ORDER BY MONTH(date)"
output <- dbGetQuery(connection, sqlQuery)
return(output)
}
# Used case
strikes_by_month_df <- queryStrikesByMonth(connection)
print(head(strikes_by_month_df))
# recall strikes_by_month_df dataframe from the previous analysis
strikes_by_month_df$Month <- factor(strikes_by_month_df$Month, levels = month.name)
# Plot
barplot(strikes_by_month_df$NumberOfStrikes,
names.arg = strikes_by_month_df$Month,
las = 2, # Rotate axis labels
col = "blue",
main = "Wildlife Strikes by Month",
xlab = "Month",
ylab = "Number of Strikes",
cex.names = 0.7)
# Add data labels
text(x = barplot(strikes_by_month_df$NumberOfStrikes, plot = FALSE),
y = strikes_by_month_df$NumberOfStrikes + 5,
label = strikes_by_month_df$NumberOfStrikes,
pos = 3,
cex = 0.8,
col = "red")
# Create audit_log table
dbExecute(connection, "
CREATE TABLE IF NOT EXISTS audit_log (
log_id INT AUTO_INCREMENT PRIMARY KEY,
modification_type VARCHAR(255),
modified_table VARCHAR(255),
modification_timestamp DATETIME,
record_id INT
);
")
#Drop the existing procedure
dropProcedureQuery <- "DROP PROCEDURE IF EXISTS remove_strike"
dbExecute(connection, dropProcedureQuery)
# Create the stored procedure
stored_procedure_query <- "
CREATE PROCEDURE remove_strike(IN strike_id INT)
BEGIN
DELETE FROM strikes WHERE sid = strike_id;
INSERT INTO audit_log (modification_type, modified_table, modification_timestamp, record_id)
VALUES ('Removal', 'strikes', NOW(), strike_id);
END
"
dbExecute(connection, stored_procedure_query)
# Call stored procedure
strike_to_remove <- 1  # Replace with the actual strike ID
dbExecute(connection, sprintf("CALL remove_strike(%d)", strike_to_remove))
# Query the audit log
audit_log_df <- dbGetQuery(connection, "SELECT * FROM audit_log")
print(audit_log_df)
